/**
 * CodeGenAgent - AI駆動コード生成
 *
 * 役割:
 * - Claude Sonnet 4による高品質コード生成
 * - TypeScript strict mode完全対応
 * - テストコード自動生成
 */

import { BaseAgent } from '../core/BaseAgent.js';
import type {
  AgentResult,
  Task,
  CodeGenResult,
  GeneratedFile
} from '../types/agent.js';

export class CodeGenAgent extends BaseAgent {
  constructor() {
    super({
      name: 'CodeGenAgent',
      version: '1.0.0',
      description: 'AI駆動コード生成Agent',
      capabilities: ['Claude統合', 'TypeScript生成', 'テスト生成', 'ファイル管理']
    });
  }

  protected async run(input: Task): Promise<Partial<AgentResult>> {
    this.log('info', `タスク ${input.id} のコード生成を開始`);

    // コード生成
    const result = await this.generateCode(input);
    this.log('info', `${result.files.length}個のファイルを生成`);

    // ファイルを書き込み
    await this.writeFiles(result.files);

    return {
      data: result,
      metadata: {
        filesGenerated: result.files.length,
        qualityScore: result.qualityScore
      }
    };
  }

  /**
   * コード生成（Claude API統合）
   */
  private async generateCode(task: Task): Promise<CodeGenResult> {
    // TODO: 実際のClaude API統合（Phase 2）
    // 現在はモック実装

    const files: GeneratedFile[] = [];

    // タスクタイプに応じてファイルを生成
    switch (task.type) {
      case 'feature':
        files.push(this.generateFeatureFile(task));
        files.push(this.generateTestFile(task));
        break;
      case 'bug':
        files.push(this.generateBugFixFile(task));
        files.push(this.generateTestFile(task));
        break;
      case 'test':
        files.push(this.generateTestFile(task));
        break;
      default:
        files.push(this.generateGenericFile(task));
    }

    return {
      files,
      summary: `Generated ${files.length} files for task: ${task.title}`,
      qualityScore: 85 // TODO: 実際の品質スコア計算
    };
  }

  /**
   * 機能ファイル生成
   */
  private generateFeatureFile(task: Task): GeneratedFile {
    const className = this.toClassName(task.title);
    const content = `/**
 * ${task.title}
 *
 * Generated by CodeGenAgent
 */

export class ${className} {
  private config: Record<string, unknown>;

  constructor(config: Record<string, unknown> = {}) {
    this.config = config;
  }

  /**
   * 実行
   */
  async execute(): Promise<void> {
    // TODO: 実装
    console.log('${className} executed');
  }

  /**
   * 設定を取得
   */
  getConfig(): Record<string, unknown> {
    return this.config;
  }
}
`;

    return {
      path: `src/features/${this.toFileName(task.title)}.ts`,
      content,
      language: 'typescript'
    };
  }

  /**
   * バグ修正ファイル生成
   */
  private generateBugFixFile(task: Task): GeneratedFile {
    return {
      path: `src/fixes/${this.toFileName(task.title)}.ts`,
      content: `/**
 * Bug Fix: ${task.title}
 *
 * Generated by CodeGenAgent
 */

export function fix${this.toClassName(task.title)}(): void {
  // TODO: バグ修正実装
  console.log('Bug fixed: ${task.title}');
}
`,
      language: 'typescript'
    };
  }

  /**
   * テストファイル生成
   */
  private generateTestFile(task: Task): GeneratedFile {
    const className = this.toClassName(task.title);
    const content = `/**
 * Test: ${task.title}
 *
 * Generated by CodeGenAgent
 */

import { describe, it, expect } from 'vitest';
import { ${className} } from '../features/${this.toFileName(task.title)}.js';

describe('${className}', () => {
  it('should execute successfully', async () => {
    const instance = new ${className}();
    await instance.execute();
    expect(instance.getConfig()).toBeDefined();
  });

  it('should handle config', () => {
    const config = { test: true };
    const instance = new ${className}(config);
    expect(instance.getConfig()).toEqual(config);
  });
});
`;

    return {
      path: `tests/${this.toFileName(task.title)}.test.ts`,
      content,
      language: 'typescript'
    };
  }

  /**
   * 汎用ファイル生成
   */
  private generateGenericFile(task: Task): GeneratedFile {
    return {
      path: `src/${this.toFileName(task.title)}.ts`,
      content: `/**
 * ${task.title}
 *
 * Generated by CodeGenAgent
 */

export function ${this.toCamelCase(task.title)}(): void {
  // TODO: 実装
  console.log('${task.title}');
}
`,
      language: 'typescript'
    };
  }

  /**
   * ファイルを書き込み
   */
  private async writeFiles(files: GeneratedFile[]): Promise<void> {
    // TODO: 実際のファイル書き込み
    // 現在はログ出力のみ
    for (const file of files) {
      this.log('info', `生成: ${file.path}`);
    }
  }

  /**
   * クラス名に変換
   */
  private toClassName(title: string): string {
    return title
      .replace(/[^a-zA-Z0-9\s]/g, '')
      .split(/\s+/)
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join('');
  }

  /**
   * ファイル名に変換
   */
  private toFileName(title: string): string {
    return title
      .replace(/[^a-zA-Z0-9\s]/g, '')
      .split(/\s+/)
      .map(word => word.toLowerCase())
      .join('-');
  }

  /**
   * camelCaseに変換
   */
  private toCamelCase(title: string): string {
    const words = title.replace(/[^a-zA-Z0-9\s]/g, '').split(/\s+/);
    return words[0].toLowerCase() + words.slice(1)
      .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
      .join('');
  }
}
